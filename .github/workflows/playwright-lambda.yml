# Playwright Lambda Tests
#
# Path handling rules:
# 1. Use ${{ github.workspace }} for absolute paths in commands
# 2. Never use ./ or ../ in paths
# 3. Use clean filenames without paths for artifacts
# 4. Always use forward slashes in paths
# 5. Create dedicated directories for outputs

name: Playwright Lambda Tests

on:
  # Run on merge to stage/prod
  push:
    branches:
      - stage
      - prod
  # Run on schedule (daily at 00:00 UTC for stage and 12:00 UTC for prod)
  schedule:
    - cron: '0 0 * * *'  # Run stage tests at 00:00 UTC
    - cron: '0 12 * * *'  # Run prod tests at 12:00 UTC
  # Manual run
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to run tests in'
        required: true
        default: 'stage'
        type: choice
        options:
          - stage
          - prod
      regions:
        description: 'Regions to run tests in'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - us-east-1
          - eu-west-2
          - ap-southeast-1

permissions:
  id-token: write
  contents: read

jobs:
  get-regions:
    name: Get regions to test
    runs-on: ubuntu-latest
    outputs:
      regions: ${{ steps.set-regions.outputs.regions }}
    steps:
      - name: Set regions
        id: set-regions
        run: |
          if [ "${{ inputs.regions }}" = "all" ]; then
            echo "regions=['us-east-1', 'eu-west-2', 'ap-southeast-1']" >> $GITHUB_OUTPUT
          else
            echo "regions=['${{ inputs.regions }}']" >> $GITHUB_OUTPUT
          fi

  get-env:
    name: Get environment
    runs-on: ubuntu-latest
    outputs:
      env: ${{ steps.set-env.outputs.env }}
      account_id: ${{ steps.set-env.outputs.account_id }}
    steps:
      - name: Set environment
        id: set-env
        run: |
          if [ "${{ github.event_name }}" = "push" ]; then
            echo "env=${{ github.ref_name }}" >> $GITHUB_OUTPUT
            if [ "${{ github.ref_name }}" = "prod" ]; then
              echo "account_id=${{ vars.PRD_NETWORK_AWS_ACCOUNT_ID }}" >> $GITHUB_OUTPUT
            else
              echo "account_id=${{ vars.STG_NETWORK_AWS_ACCOUNT_ID }}" >> $GITHUB_OUTPUT
            fi
          elif [ "${{ github.event_name }}" = "schedule" ]; then
            if [ "${{ github.event.schedule }}" = "0 0 * * *" ]; then
              echo "env=stage" >> $GITHUB_OUTPUT
              echo "account_id=${{ vars.STG_NETWORK_AWS_ACCOUNT_ID }}" >> $GITHUB_OUTPUT
            else
              echo "env=prod" >> $GITHUB_OUTPUT
              echo "account_id=${{ vars.PRD_NETWORK_AWS_ACCOUNT_ID }}" >> $GITHUB_OUTPUT
            fi
          else
            echo "env=${{ inputs.environment }}" >> $GITHUB_OUTPUT
            if [ "${{ inputs.environment }}" = "prod" ]; then
              echo "account_id=${{ vars.PRD_NETWORK_AWS_ACCOUNT_ID }}" >> $GITHUB_OUTPUT
            else
              echo "account_id=${{ vars.STG_NETWORK_AWS_ACCOUNT_ID }}" >> $GITHUB_OUTPUT
            fi
          fi

          # Print parameters that will be used
          echo "Parameters that will be used:"
          echo "env: ${{ steps.set-env.outputs.env }}"
          echo "account_id: ${{ steps.set-env.outputs.account_id }}"
          echo "lambda_function_name: playwright-test-${{ steps.set-env.outputs.env }}"

  print-params:
    name: Print Deploy Parameters
    needs: [get-regions, get-env]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        region: ${{ fromJson(needs.get-regions.outputs.regions) }}
    steps:
      - name: Print parameters
        run: |
          echo "Parameters for reusable workflow:"
          echo "aws_account_id: ${{ needs.get-env.outputs.account_id }}"
          echo "lambda_function_name: playwright-test-${{ needs.get-env.outputs.env }}"
          echo "aws_region: ${{ matrix.region }}"
          echo "env: ${{ needs.get-env.outputs.env }}"

  deploy-lambda:
    name: Deploy Lambda Function
    needs: [get-regions, get-env]
    strategy:
      matrix:
        region: ${{ fromJson(needs.get-regions.outputs.regions) }}
    uses: cere-io/reusable-workflows/.github/workflows/deploy-to-lambda.yaml@master
    with:
      aws_account_id: ${{ needs.get-env.outputs.account_id }}
      lambda_function_name: playwright-test-${{ needs.get-env.outputs.env }}
      aws_region: ${{ matrix.region }}
      build_files: true
      build_container: node:20
      install_packages_command: |
        echo "Using parameters:"
        echo "lambda_function_name: playwright-test-${{ needs.get-env.outputs.env }}"
        echo "aws_account_id: ${{ needs.get-env.outputs.account_id }}"
        echo "aws_region: ${{ matrix.region }}"
        npm ci
      build_command: npm run prepare:lambda
      path_to_application_files_to_upload: ""
      client_path: ""
      runs-on: '["ubuntu-latest"]'

  test:
    name: Run Playwright Tests in Lambda
    needs: [get-regions, get-env, deploy-lambda]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        region: ${{ fromJson(needs.get-regions.outputs.regions) }}
        env: ${{ needs.get-env.outputs.env }}
      fail-fast: false
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-skip-session-tagging: true
          role-to-assume: arn:aws:iam::${{ needs.get-env.outputs.account_id }}:role/github
          role-session-name: ${{ github.event.repository.name }}
          aws-region: ${{ matrix.region }}
          audience: sts.amazonaws.com

      - name: Create output directory
        run: |
          mkdir -p "${{ github.workspace }}/test-output"

      - name: Run tests in Lambda
        id: run_tests
        working-directory: ${{ github.workspace }}
        run: |
          # Use clean paths for all files
          RESPONSE_FILE="${GITHUB_WORKSPACE}/test-output/response.json"
          LOGS_FILE="${GITHUB_WORKSPACE}/test-output/lambda.log"
          LOGS_BASE64="${GITHUB_WORKSPACE}/test-output/lambda-logs.base64"
          
          # Wait for Lambda to be ready
          echo "Waiting for Lambda function to be ready..."
          aws lambda wait function-active \
            --function-name "playwright-test-${{ matrix.env }}" \
            --region ${{ matrix.region }}
          
          # Run Lambda with timeout and capture logs
          echo "Running tests in Lambda..."
          timeout 900 aws lambda invoke \
            --function-name "playwright-test-${{ matrix.env }}" \
            --payload '{"region": "${{ matrix.region }}", "environment": "${{ matrix.env }}"}' \
            --cli-binary-format raw-in-base64-out \
            --log-type Tail \
            --query 'LogResult' \
            --output text \
            "$LOGS_BASE64" \
            > "$RESPONSE_FILE" 2>&1 || { echo "Lambda execution failed"; exit 1; }

          # Process and check results as before...
          if [ -f "$LOGS_BASE64" ]; then
            base64 -d "$LOGS_BASE64" > "$LOGS_FILE"
            echo "Lambda execution logs:"
            cat "$LOGS_FILE"
          else
            echo "::warning::No Lambda logs found"
          fi

          if [ -f "$RESPONSE_FILE" ]; then
            echo "Test results:"
            cat "$RESPONSE_FILE"
            
            if grep -q "error" "$RESPONSE_FILE" || \
               grep -q "statusCode.:.*500" "$RESPONSE_FILE" || \
               grep -q "FunctionError" "$RESPONSE_FILE" || \
               grep -q "Task timed out" "$RESPONSE_FILE"; then
              echo "::error::Tests failed in region ${{ matrix.region }} for environment ${{ matrix.env }}"
              exit 1
            fi
          else
            echo "::error::No test results found"
            exit 1
          fi

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.env }}-${{ matrix.region }}
          path: ${{ github.workspace }}/test-output/**/*
          if-no-files-found: warn
          retention-days: 7

      - name: Cleanup temporary files
        if: always()
        working-directory: ${{ github.workspace }}
        run: |
          echo "Cleaning up temporary files..."
          rm -rf test-output
          find . -maxdepth 1 -name "*.zip" -type f -delete || true
          rm -rf node_modules || true
          rm -rf .cache || true
          rm -rf playwright-report || true
          echo "Cleanup completed"

      - name: Delete Lambda function
        if: always()
        run: |
          echo "Checking if Lambda function exists..."
          if aws lambda get-function \
            --function-name "playwright-test-${{ matrix.env }}" \
            --region ${{ matrix.region }} >/dev/null 2>&1; then
            echo "Deleting Lambda function..."
            aws lambda delete-function \
              --function-name "playwright-test-${{ matrix.env }}" \
              --region ${{ matrix.region }}
            echo "Lambda function deleted"
          else
            echo "Lambda function not found, skipping deletion"
          fi
