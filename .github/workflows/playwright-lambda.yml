# Playwright Lambda Tests
#
# Path handling rules:
# 1. Use ${{ github.workspace }} for absolute paths in commands
# 2. Never use ./ or ../ in paths
# 3. Use clean filenames without paths for artifacts
# 4. Always use forward slashes in paths
# 5. Create dedicated directories for outputs

name: Playwright Lambda Tests

on:
  # Run on merge to stage/prod
  push:
    branches:
      - stage
      - prod
  # Run on schedule (daily at 00:00 UTC for stage and 12:00 UTC for prod)
  schedule:
    - cron: '0 0 * * *'  # Run stage tests at 00:00 UTC
    - cron: '0 12 * * *'  # Run prod tests at 12:00 UTC
  # Manual run
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to run tests in'
        required: true
        default: 'stage'
        type: choice
        options:
          - stage
          - prod
      regions:
        description: 'Regions to run tests in'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - us-west-2
          - eu-central-1

permissions:
  id-token: write
  contents: read

jobs:
  get-regions:
    name: Get regions to test
    runs-on: ubuntu-latest
    outputs:
      regions: ${{ steps.set-regions.outputs.regions }}
    steps:
      - name: Set regions
        id: set-regions
        run: |
          if [ "${{ inputs.regions }}" = "all" ]; then
            echo "regions=['us-east-1', 'eu-west-2', 'ap-southeast-1']" >> $GITHUB_OUTPUT
          else
            echo "regions=['${{ inputs.regions }}']" >> $GITHUB_OUTPUT
          fi

  get-env:
    name: Get environment
    runs-on: ubuntu-latest
    outputs:
      env: ${{ steps.set-env.outputs.env }}
      account_id: ${{ steps.set-env.outputs.account_id }}
    steps:
      - name: Set environment
        id: set-env
        run: |
          if [ "${{ github.event_name }}" = "push" ]; then
            echo "env=${{ github.ref_name }}" >> $GITHUB_OUTPUT
            if [ "${{ github.ref_name }}" = "prod" ]; then
              echo "account_id=${{ vars.PRD_CORE_AWS_ACCOUNT_ID }}" >> $GITHUB_OUTPUT
            else
              echo "account_id=${{ vars.STG_CORE_AWS_ACCOUNT_ID }}" >> $GITHUB_OUTPUT
            fi
          elif [ "${{ github.event_name }}" = "schedule" ]; then
            if [ "${{ github.event.schedule }}" = "0 0 * * *" ]; then
              echo "env=stage" >> $GITHUB_OUTPUT
              echo "account_id=${{ vars.STG_CORE_AWS_ACCOUNT_ID }}" >> $GITHUB_OUTPUT
            else
              echo "env=prod" >> $GITHUB_OUTPUT
              echo "account_id=${{ vars.PRD_CORE_AWS_ACCOUNT_ID }}" >> $GITHUB_OUTPUT
            fi
          else
            echo "env=${{ inputs.environment }}" >> $GITHUB_OUTPUT
            if [ "${{ inputs.environment }}" = "prod" ]; then
              echo "account_id=${{ vars.PRD_CORE_AWS_ACCOUNT_ID }}" >> $GITHUB_OUTPUT
            else
              echo "account_id=${{ vars.STG_CORE_AWS_ACCOUNT_ID }}" >> $GITHUB_OUTPUT
            fi
          fi

          # Print parameters that will be used
          echo "Parameters that will be used:"
          echo "env: ${{ steps.set-env.outputs.env }}"
          echo "account_id: ${{ steps.set-env.outputs.account_id }}"
          echo "lambda_function_name: playwright-test-${{ steps.set-env.outputs.env }}"

  deploy-lambda:
    name: Deploy Lambda Function
    needs: [get-regions, get-env]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        region: ${{ fromJson(needs.get-regions.outputs.regions) }}
      fail-fast: false
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: |
          echo "Installing dependencies..."
          npm ci
          echo "Dependencies installed successfully"

      - name: Prepare Lambda package
        run: |
          echo "Building Lambda package..."
          npm run prepare:lambda
          echo "Lambda package built successfully"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-skip-session-tagging: true
          role-to-assume: arn:aws:iam::${{ vars.STG_CORE_AWS_ACCOUNT_ID }}:role/github
          role-session-name: ${{ github.event.repository.name }}
          aws-region: ${{ matrix.region }}
          audience: sts.amazonaws.com

      - name: Deploy Lambda function
        run: |
          # Upload package to S3
          echo "Uploading package to S3..."
          PACKAGE_S3_KEY="lambda-packages/playwright-test-${{ needs.get-env.outputs.env }}-${{ github.run_id }}.zip"
          aws s3 cp lambda-package.zip "s3://cere-playwright-tests-results/${PACKAGE_S3_KEY}" || {
            echo "::error::Failed to upload package to S3"
            exit 1
          }
          
          echo "Creating/updating Lambda function..."
          if aws lambda get-function --function-name "playwright-test-${{ needs.get-env.outputs.env }}" --region ${{ matrix.region }} >/dev/null 2>&1; then
            echo "Updating existing Lambda function..."
            aws lambda update-function-code \
              --function-name "playwright-test-${{ needs.get-env.outputs.env }}" \
              --s3-bucket "cere-playwright-tests-results" \
              --s3-key "${PACKAGE_S3_KEY}" \
              --region ${{ matrix.region }}
          else
            echo "Creating new Lambda function..."
            echo "${{ needs.get-env.outputs.account_id }}"
            aws lambda create-function \
              --function-name "playwright-test-${{ needs.get-env.outputs.env }}" \
              --runtime nodejs20.x \
              --handler index.handler \
              --role "arn:aws:iam::${{ needs.get-env.outputs.account_id }}:role/lambda-playwright-test" \
              --timeout 900 \
              --memory-size 2048 \
              --code S3Bucket=cere-playwright-tests-results,S3Key=${PACKAGE_S3_KEY} \
              --region ${{ matrix.region }}
          fi
          
          echo "Waiting for Lambda function to be ready..."
          aws lambda wait function-active \
            --function-name "playwright-test-${{ needs.get-env.outputs.env }}" \
            --region ${{ matrix.region }}
          
          echo "Lambda function deployed successfully"
          
          # Cleanup S3
          echo "Cleaning up S3..."
          aws s3 rm "s3://cere-playwright-tests-results/${PACKAGE_S3_KEY}" || echo "::warning::Failed to delete package from S3"

      - name: Run tests in Lambda
        id: run_tests
        working-directory: ${{ github.workspace }}
        run: |
          # ... существующий код ...

          # После получения результата Lambda
          echo "Extracting metrics from Lambda response..."

          # Сохраняем полный ответ
          echo "$RESPONSE" > "${GITHUB_WORKSPACE}/test-output/raw-response.json"

          # Извлекаем body 
          BODY=$(echo "$RESPONSE" | jq -r '.body')
          echo "$BODY" > "${GITHUB_WORKSPACE}/test-output/lambda-body.txt"

          # Пробуем несколько методов извлечения

          # 1. Пытаемся извлечь rawMetrics (JSON массив)
          echo "Method 1: Extracting rawMetrics as JSON..."
          if echo "$BODY" | jq -e '.rawMetrics' >/dev/null 2>&1; then
            RAW_METRICS=$(echo "$BODY" | jq -r '.rawMetrics')
            echo "Raw metrics found: $RAW_METRICS"

            # Форматируем метрики
            echo "" > "${GITHUB_WORKSPACE}/test-output/performance-metrics.txt"
            echo "$RAW_METRICS" | jq -c '.[]' | while read -r metric; do
              NAME=$(echo "$metric" | jq -r '.name')
              DURATION=$(echo "$metric" | jq -r '.duration')
              echo "${NAME} took ${DURATION}ms" >> "${GITHUB_WORKSPACE}/test-output/performance-metrics.txt"
            done

            METRICS=$(cat "${GITHUB_WORKSPACE}/test-output/performance-metrics.txt")
            echo "Formatted metrics: $METRICS"
          else
            echo "No rawMetrics found in JSON"
          fi

          # 2. Пытаемся извлечь performanceMetrics напрямую
          if [ -z "$METRICS" ]; then
            echo "Method 2: Extracting performanceMetrics directly..."
            if echo "$BODY" | jq -e '.performanceMetrics' >/dev/null 2>&1; then
              METRICS=$(echo "$BODY" | jq -r '.performanceMetrics')
              echo "Performance metrics found: $METRICS"
              echo "$METRICS" > "${GITHUB_WORKSPACE}/test-output/performance-metrics.txt"
            else
              echo "No performanceMetrics found in JSON"
            fi
          fi

          # 3. Пытаемся использовать регулярные выражения
          if [ -z "$METRICS" ]; then
            echo "Method 3: Using regex extraction..."
            METRICS=$(echo "$BODY" | grep -o '"performanceMetrics":"[^"]*"' | sed 's/"performanceMetrics":"//g' | sed 's/"$//g' | sed 's/\\n/\n/g')

            if [ -n "$METRICS" ]; then
              echo "Metrics extracted with regex: $METRICS"
              echo "$METRICS" > "${GITHUB_WORKSPACE}/test-output/performance-metrics.txt"
            else
              echo "No metrics found using regex"
            fi
          fi

          # Создаем базовый отчет в любом случае
          if [ -s "${GITHUB_WORKSPACE}/test-output/performance-metrics.txt" ]; then
            METRICS=$(cat "${GITHUB_WORKSPACE}/test-output/performance-metrics.txt")
            echo "Final metrics: $METRICS"

            echo "# 📊 Performance Test Results" >> $GITHUB_STEP_SUMMARY
            echo "| Test | Duration | Status |" >> $GITHUB_STEP_SUMMARY
            echo "| ---- | -------- | ------ |" >> $GITHUB_STEP_SUMMARY

            while IFS= read -r line; do
              if [[ $line =~ ([a-zA-Z ]+)\ took\ ([0-9]+)ms ]]; then
                TEST_NAME="${BASH_REMATCH[1]}"
                DURATION="${BASH_REMATCH[2]}"

                # Определяем статус
                if [ "$DURATION" -lt 1000 ]; then
                  STATUS="✅ Excellent"
                elif [ "$DURATION" -lt 5000 ]; then
                  STATUS="✅ Good"
                elif [ "$DURATION" -lt 10000 ]; then
                  STATUS="⚠️ Acceptable"
                else
                  STATUS="🔴 Slow"
                fi

                echo "| $TEST_NAME | ${DURATION}ms | $STATUS |" >> $GITHUB_STEP_SUMMARY
              fi
            done <<< "$METRICS"
          else
            echo "# ❌ No Performance Metrics Available" >> $GITHUB_STEP_SUMMARY
            echo "Performance metrics could not be extracted from the Lambda response." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "## Debug Information" >> $GITHUB_STEP_SUMMARY
            echo "- Status Code: $(echo "$RESPONSE" | jq -r '.StatusCode')" >> $GITHUB_STEP_SUMMARY
            echo "- Function Error: $(echo "$RESPONSE" | jq -r '.FunctionError // "None"')" >> $GITHUB_STEP_SUMMARY
            echo "- Body Length: $(echo "$BODY" | wc -c) characters" >> $GITHUB_STEP_SUMMARY
          fi

#      - name: Upload test results to S3
#        if: always()
#        run: |
#          echo "Uploading test results to S3..."
#          aws s3 cp \
#            "$GITHUB_WORKSPACE/test-output/" \
#            "s3://cere-playwright-tests-results/telegram/${{ needs.get-env.outputs.env }}/${{ matrix.region }}/${{ github.run_id }}/" \
#            --recursive || echo "::warning::Failed to upload test results to S3"
#
#          echo "Test results uploaded to s3://cere-playwright-tests-results/telegram/${{ needs.get-env.outputs.env }}/${{ matrix.region }}/${{ github.run_id }}/"

      - name: Upload test results as artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ needs.get-env.outputs.env }}-${{ matrix.region }}
          path: ${{ github.workspace }}/test-output/**/*
          if-no-files-found: warn
          retention-days: 7

      - name: Cleanup temporary files
        if: always()
        working-directory: ${{ github.workspace }}
        run: |
          echo "Cleaning up temporary files..."
          rm -rf test-output
          find . -maxdepth 1 -name "*.zip" -type f -delete || true
          rm -rf node_modules || true
          rm -rf .cache || true
          rm -rf playwright-report || true
          echo "Cleanup completed"

      - name: Delete Lambda function
        if: always()
        run: |
          echo "Checking if Lambda function exists..."
          if aws lambda get-function \
            --function-name "playwright-test-${{ needs.get-env.outputs.env }}" \
            --region ${{ matrix.region }} >/dev/null 2>&1; then
            echo "Deleting Lambda function..."
            aws lambda delete-function \
              --function-name "playwright-test-${{ needs.get-env.outputs.env }}" \
              --region ${{ matrix.region }} || echo "::warning::Failed to delete Lambda function"
            echo "Lambda function deleted"
          else
            echo "Lambda function not found, skipping deletion"
          fi
