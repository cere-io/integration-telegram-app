# Playwright Lambda Tests
#
# Path handling rules:
# 1. Use ${{ github.workspace }} for absolute paths in commands
# 2. Never use ./ or ../ in paths
# 3. Use clean filenames without paths for artifacts
# 4. Always use forward slashes in paths
# 5. Create dedicated directories for outputs

name: Playwright Lambda Tests

on:
  # Run on merge to stage/prod
  push:
    branches:
      - stage
      - prod
  # Run on schedule (daily at 00:00 UTC for stage and 12:00 UTC for prod)
  schedule:
    - cron: '0 0 * * *'  # Run stage tests at 00:00 UTC
    - cron: '0 12 * * *' # Run prod tests at 12:00 UTC
  # Manual run
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to run tests in'
        required: true
        default: 'stage'
        type: choice
        options:
          - stage
          - prod
      regions:
        description: 'Regions to run tests in'
        required: true
        default: 'all'
        type: choice
        # Add single-region options you want the user to be able to select:
        options:
          - all
          - eu-central-1
          - us-west-2
          - us-east-1
          - eu-west-1
          - eu-west-2
          - eu-north-1

permissions:
  id-token: write
  contents: read

jobs:
  get-regions:
    name: Get regions to test
    runs-on: ubuntu-latest
    outputs:
      regions: ${{ steps.set-regions.outputs.regions }}
    steps:
      - name: Set regions
        id: set-regions
        run: |
          # For schedule events or push events, default to these two regions:
          if [ "${{ github.event_name }}" = "schedule" ] || [ "${{ github.event_name }}" = "push" ]; then
            echo "regions=['eu-central-1','us-west-2']" >> $GITHUB_OUTPUT

          # If user selects "all" for a manual run, list multiple regions:
          elif [ "${{ inputs.regions }}" = "all" ]; then
            echo "regions=['eu-central-1','us-west-2','us-east-1','eu-west-1','eu-west-2','eu-north-1']" >> $GITHUB_OUTPUT

          # Otherwise, just use the single region chosen:
          else
            echo "regions=['${{ inputs.regions }}']" >> $GITHUB_OUTPUT
          fi
          
          echo "Selected regions: $(cat $GITHUB_OUTPUT | grep regions)"

  get-env:
    name: Get environment
    runs-on: ubuntu-latest
    outputs:
      env: ${{ steps.set-env.outputs.env }}
      account_id: ${{ steps.set-env.outputs.account_id }}
    steps:
      - name: Set environment
        id: set-env
        run: |
          if [ "${{ github.event_name }}" = "push" ]; then
            echo "env=${{ github.ref_name }}" >> $GITHUB_OUTPUT
            if [ "${{ github.ref_name }}" = "prod" ]; then
              echo "account_id=${{ vars.PRD_CORE_AWS_ACCOUNT_ID }}" >> $GITHUB_OUTPUT
            else
              echo "account_id=${{ vars.STG_CORE_AWS_ACCOUNT_ID }}" >> $GITHUB_OUTPUT
            fi
          elif [ "${{ github.event_name }}" = "schedule" ]; then
            if [ "${{ github.event.schedule }}" = "0 0 * * *" ]; then
              echo "env=stage" >> $GITHUB_OUTPUT
              echo "account_id=${{ vars.STG_CORE_AWS_ACCOUNT_ID }}" >> $GITHUB_OUTPUT
            else
              echo "env=prod" >> $GITHUB_OUTPUT
              echo "account_id=${{ vars.PRD_CORE_AWS_ACCOUNT_ID }}" >> $GITHUB_OUTPUT
            fi
          else
            echo "env=${{ inputs.environment }}" >> $GITHUB_OUTPUT
            if [ "${{ inputs.environment }}" = "prod" ]; then
              echo "account_id=${{ vars.PRD_CORE_AWS_ACCOUNT_ID }}" >> $GITHUB_OUTPUT
            else
              echo "account_id=${{ vars.STG_CORE_AWS_ACCOUNT_ID }}" >> $GITHUB_OUTPUT
            fi
          fi

          # Print parameters that will be used
          echo "Parameters that will be used:"
          echo "env: ${{ steps.set-env.outputs.env }}"
          echo "account_id: ${{ steps.set-env.outputs.account_id }}"
          echo "lambda_function_name: playwright-test-${{ steps.set-env.outputs.env }}"

  deploy-lambda:
    name: Deploy Lambda Function
    needs: [get-regions, get-env]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        region: ${{ fromJson(needs.get-regions.outputs.regions) }}
      fail-fast: false
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: |
          echo "Installing dependencies..."
          npm ci
          echo "Dependencies installed successfully"

      - name: Prepare Lambda package
        run: |
          echo "Building Lambda package..."
          npm run prepare:lambda
          echo "Lambda package built successfully"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-skip-session-tagging: true
          role-to-assume: arn:aws:iam::${{ vars.STG_CORE_AWS_ACCOUNT_ID }}:role/github
          role-session-name: ${{ github.event.repository.name }}
          aws-region: ${{ matrix.region }}
          audience: sts.amazonaws.com

      - name: Deploy Lambda function
        run: |
          echo "Creating/updating Lambda function..."
          if aws lambda get-function --function-name "playwright-test-${{ needs.get-env.outputs.env }}" --region ${{ matrix.region }} >/dev/null 2>&1; then
            echo "Updating existing Lambda function..."
            aws lambda update-function-code \
              --function-name "playwright-test-${{ needs.get-env.outputs.env }}" \
              --zip-file fileb://lambda-package.zip \
              --region ${{ matrix.region }}
          else
            echo "Creating new Lambda function..."
            aws lambda create-function \
              --function-name "playwright-test-${{ needs.get-env.outputs.env }}" \
              --runtime nodejs20.x \
              --handler index.handler \
              --role "arn:aws:iam::${{ needs.get-env.outputs.account_id }}:role/lambda-playwright-test" \
              --timeout 900 \
              --memory-size 2048 \
              --zip-file fileb://lambda-package.zip \
              --region ${{ matrix.region }}
          fi
          
          echo "Waiting for Lambda function to be ready..."
          aws lambda wait function-active \
            --function-name "playwright-test-${{ needs.get-env.outputs.env }}" \
            --region ${{ matrix.region }}
          
          echo "Lambda function deployed successfully"

      - name: Run tests in Lambda
        id: run_tests
        run: |
          OUTPUT_DIR="/tmp/test-output"
          echo "Creating output directory at ${OUTPUT_DIR}..."
          mkdir -p "${OUTPUT_DIR}"

          if [ -d "${OUTPUT_DIR}" ]; then
            echo "Directory created successfully"
          else
            echo "::error::Failed to create directory, using /tmp directly"
            OUTPUT_DIR="/tmp"
          fi

          WORKSPACE_OUTPUT="${GITHUB_WORKSPACE}/test-output"
          echo "Creating workspace directory at ${WORKSPACE_OUTPUT}..."
          mkdir -p "${WORKSPACE_OUTPUT}"

          echo "Waiting for Lambda function to be ready..."
          aws lambda wait function-active \
            --function-name "playwright-test-${{ needs.get-env.outputs.env }}" \
            --region ${{ matrix.region }} || {
              echo "::error::Lambda function not ready after waiting"
              exit 1
            }

          echo "Lambda function is ready, starting tests..."

          echo "Running tests in Lambda..."
          RESPONSE=$(timeout 900 aws lambda invoke \
            --function-name "playwright-test-${{ needs.get-env.outputs.env }}" \
            --payload '{"region": "${{ matrix.region }}", "environment": "${{ needs.get-env.outputs.env }}"}' \
            --cli-binary-format raw-in-base64-out \
            --output json \
            /dev/stdout) || {
              echo "::error::Lambda invocation timed out or failed to execute"
              exit 1
            }

          echo "$RESPONSE" > "${OUTPUT_DIR}/raw-response.json"
          echo "$RESPONSE" > "${WORKSPACE_OUTPUT}/raw-response.json"
          echo "Response saved to both directories"

          echo "===== LAMBDA RESPONSE ====="
          echo "$RESPONSE" | jq '.'
          echo "==========================="

          BODY=$(echo "$RESPONSE" | jq -r '.body')
          echo "$BODY" > "${OUTPUT_DIR}/lambda-body.txt"
          echo "$BODY" > "${WORKSPACE_OUTPUT}/lambda-body.txt"

          if [ -f "/tmp/console-errors.txt" ]; then
            echo "Copying console-errors.txt from /tmp to output directories..."
            cp "/tmp/console-errors.txt" "${OUTPUT_DIR}/"
            cp "/tmp/console-errors.txt" "${WORKSPACE_OUTPUT}/"
          fi

          if [ -f "/tmp/console-errors.json" ]; then
            echo "Copying console-errors.json from /tmp to output directories..."
            cp "/tmp/console-errors.json" "${OUTPUT_DIR}/"
            cp "/tmp/console-errors.json" "${WORKSPACE_OUTPUT}/"
          fi

          if [[ "$BODY" == \"* ]] && [[ "$BODY" == *\" ]]; then
            echo "Body appears to be a JSON string, attempting to parse..."
            PARSED_BODY=$(echo "$BODY" | sed 's/^"//; s/"$//; s/\\"/"/g; s/\\n/\n/g; s/\\\\/\\/g')
            echo "$PARSED_BODY" > "${OUTPUT_DIR}/parsed-body.txt"
            echo "$PARSED_BODY" > "${WORKSPACE_OUTPUT}/parsed-body.txt"
            BODY="$PARSED_BODY"
          fi

          METRICS=""

          echo "Method 1: Trying to parse body as JSON..."
          if echo "$BODY" | jq -e . >/dev/null 2>&1; then
            echo "Body is valid JSON"

            if echo "$BODY" | jq -e '.metrics' >/dev/null 2>&1; then
              echo "Found metrics array in body JSON"
              METRICS_JSON=$(echo "$BODY" | jq -c '.metrics')
              echo "$METRICS_JSON" > "${OUTPUT_DIR}/metrics-json.json"
              echo "$METRICS_JSON" > "${WORKSPACE_OUTPUT}/metrics-json.json"

              echo "Formatting metrics from JSON array..."
              echo "" > "${OUTPUT_DIR}/performance-metrics.txt"
              echo "" > "${WORKSPACE_OUTPUT}/performance-metrics.txt"
              echo "$METRICS_JSON" | jq -c '.[]' | while read -r metric; do
                NAME=$(echo "$metric" | jq -r '.name')
                DURATION=$(echo "$metric" | jq -r '.duration')
                FAKED=$(echo "$metric" | jq -r '.faked // false')
                
                if [ "$FAKED" == "true" ]; then
                  METRIC_LINE="${NAME} took ${DURATION}ms [AUTH_ERROR]"
                else
                  METRIC_LINE="${NAME} took ${DURATION}ms"
                fi
                
                echo "$METRIC_LINE" >> "${OUTPUT_DIR}/performance-metrics.txt"
                echo "$METRIC_LINE" >> "${WORKSPACE_OUTPUT}/performance-metrics.txt"
              done

              METRICS=$(cat "${OUTPUT_DIR}/performance-metrics.txt")
              echo "Metrics from JSON array: $METRICS"
            elif echo "$BODY" | jq -e '.performanceMetrics' >/dev/null 2>&1; then
              echo "Found performanceMetrics string in body JSON"
              METRICS=$(echo "$BODY" | jq -r '.performanceMetrics')
              echo "$METRICS" > "${OUTPUT_DIR}/performance-metrics.txt"
              echo "$METRICS" > "${WORKSPACE_OUTPUT}/performance-metrics.txt"
              echo "Metrics from performanceMetrics: $METRICS"
            else
              echo "No metrics fields found in JSON body"
            fi

            if echo "$BODY" | jq -e '.authError' >/dev/null 2>&1; then
              echo "Found authentication error in response"
              AUTH_ERROR=$(echo "$BODY" | jq -c '.authError')
              echo "$AUTH_ERROR" > "${OUTPUT_DIR}/auth-error.json"
              echo "$AUTH_ERROR" > "${WORKSPACE_OUTPUT}/auth-error.json"
              echo "Authentication error saved to files"
              
              AUTH_ERROR_TYPE=$(echo "$AUTH_ERROR" | jq -r '.type')
              AUTH_ERROR_MSG=$(echo "$AUTH_ERROR" | jq -r '.message')
              AUTH_ERROR_TIME=$(echo "$AUTH_ERROR" | jq -r '.timestamp')
              
              echo "Auth error details - Type: $AUTH_ERROR_TYPE, Message: $AUTH_ERROR_MSG, Time: $AUTH_ERROR_TIME"
            fi
          else
            echo "Body is not valid JSON, trying other methods..."
          fi

          if [ -z "$METRICS" ]; then
            echo "Method 2: Using direct grep for metrics strings..."
            GREP_METRICS=$(echo "$BODY" | grep -o '[A-Za-z ]\+ took [0-9]\+ms' || echo "")

            if [ -n "$GREP_METRICS" ]; then
              echo "Found metrics with grep: $GREP_METRICS"
              echo "$GREP_METRICS" > "${OUTPUT_DIR}/performance-metrics.txt"
              echo "$GREP_METRICS" > "${WORKSPACE_OUTPUT}/performance-metrics.txt"
              METRICS="$GREP_METRICS"
            else
              echo "No metrics found with grep"
            fi
          fi

          if [ -z "$METRICS" ]; then
            echo "Method 3: Extracting from escaped JSON string..."
            ESCAPED_METRICS=$(echo "$BODY" | grep -o '"performanceMetrics":"[^"]*"' | sed 's/"performanceMetrics":"//g' | sed 's/"$//g' | sed 's/\\n/\n/g')

            if [ -n "$ESCAPED_METRICS" ]; then
              echo "Found metrics in escaped string: $ESCAPED_METRICS"
              echo "$ESCAPED_METRICS" > "${OUTPUT_DIR}/performance-metrics.txt"
              echo "$ESCAPED_METRICS" > "${WORKSPACE_OUTPUT}/performance-metrics.txt"
              METRICS="$ESCAPED_METRICS"
            else
              echo "No metrics found in escaped strings"
            fi
          fi

          if [ -z "$METRICS" ] || [ "$(echo "$METRICS" | wc -l)" -lt 3 ]; then
            echo "Metrics missing or incomplete, test is considered FAILED"
            echo "# ❌ Performance Test Results" >> $GITHUB_STEP_SUMMARY
            echo "Test is FAILED: Expected 3 metrics (Active Quests Screen, Leaderboard Screen, Library Screen)" >> $GITHUB_STEP_SUMMARY
            echo "Only found $(echo "$METRICS" | wc -l) metrics:" >> $GITHUB_STEP_SUMMARY
            
            if [ -n "$METRICS" ]; then
              echo '```' >> $GITHUB_STEP_SUMMARY
              echo "$METRICS" >> $GITHUB_STEP_SUMMARY
              echo '```' >> $GITHUB_STEP_SUMMARY
            else
              echo "No metrics found" >> $GITHUB_STEP_SUMMARY
            fi
            
            if echo "$BODY" | jq -e '.authError' >/dev/null 2>&1; then
              AUTH_ERROR_TYPE=$(echo "$BODY" | jq -r '.authError.type')
              AUTH_ERROR_MSG=$(echo "$BODY" | jq -r '.authError.message')
              AUTH_ERROR_TIME=$(echo "$BODY" | jq -r '.authError.timestamp')
              
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "## ⚠️ Authentication Error Detected" >> $GITHUB_STEP_SUMMARY
              echo "Authentication failed during test execution. This prevented testing of Leaderboard and Library screens." >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "### Error Details" >> $GITHUB_STEP_SUMMARY
              echo "- **Type:** ${AUTH_ERROR_TYPE}" >> $GITHUB_STEP_SUMMARY
              echo "- **Message:** ${AUTH_ERROR_MSG}" >> $GITHUB_STEP_SUMMARY
              echo "- **Time:** ${AUTH_ERROR_TIME}" >> $GITHUB_STEP_SUMMARY
              
              if echo "$AUTH_ERROR" | jq -e '.consoleErrors' >/dev/null 2>&1; then
                echo "" >> $GITHUB_STEP_SUMMARY
                echo "### Browser Console Errors" >> $GITHUB_STEP_SUMMARY
                echo "The following errors were detected in the browser console during authentication:" >> $GITHUB_STEP_SUMMARY
                echo "" >> $GITHUB_STEP_SUMMARY
                echo "```" >> $GITHUB_STEP_SUMMARY
                echo "$AUTH_ERROR" | jq -r '.consoleErrors[] | "[\(.type)] \(.text)"' >> $GITHUB_STEP_SUMMARY
                echo "```" >> $GITHUB_STEP_SUMMARY
              fi
              
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "### Troubleshooting Steps" >> $GITHUB_STEP_SUMMARY
              echo "1. Check if the web3auth service is working properly" >> $GITHUB_STEP_SUMMARY
              echo "2. Verify that the test credentials (email and OTP) are still valid" >> $GITHUB_STEP_SUMMARY
              echo "3. Check for any recent changes to the authentication flow" >> $GITHUB_STEP_SUMMARY
              echo "4. Run the test locally with npx playwright test --debug to see detailed steps" >> $GITHUB_STEP_SUMMARY
              
              if aws s3 ls s3://playwright-test-artifacts/login-error.png >/dev/null 2>&1; then
                echo "- **Screenshot:** [View Auth Error Screenshot](https://playwright-test-artifacts.s3.amazonaws.com/login-error.png)" >> $GITHUB_STEP_SUMMARY
              fi
            elif [ -f "${OUTPUT_DIR}/error-log.txt" ]; then
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "## ⚠️ Test Errors" >> $GITHUB_STEP_SUMMARY
              echo '```' >> $GITHUB_STEP_SUMMARY
              cat "${OUTPUT_DIR}/error-log.txt" >> $GITHUB_STEP_SUMMARY
              echo '```' >> $GITHUB_STEP_SUMMARY
            fi
            
            HAS_CONSOLE_ERRORS=true
            
            if [ -f "${OUTPUT_DIR}/console-errors.txt" ]; then
              HAS_CONSOLE_ERRORS=true
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "## 🔴 Browser Console Errors" >> $GITHUB_STEP_SUMMARY
              echo "Browser console errors were detected during test execution:" >> $GITHUB_STEP_SUMMARY
              echo '```' >> $GITHUB_STEP_SUMMARY
              cat "${OUTPUT_DIR}/console-errors.txt" >> $GITHUB_STEP_SUMMARY
              echo '```' >> $GITHUB_STEP_SUMMARY
            elif [ -f "${OUTPUT_DIR}/console-errors-formatted.txt" ]; then
              HAS_CONSOLE_ERRORS=true
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "## 🔴 Browser Console Errors (formatted)" >> $GITHUB_STEP_SUMMARY
              echo "Browser console errors were detected during test execution:" >> $GITHUB_STEP_SUMMARY
              echo '```' >> $GITHUB_STEP_SUMMARY
              cat "${OUTPUT_DIR}/console-errors-formatted.txt" >> $GITHUB_STEP_SUMMARY
              echo '```' >> $GITHUB_STEP_SUMMARY
            elif [ -f "${OUTPUT_DIR}/console-errors.json" ]; then
              HAS_CONSOLE_ERRORS=true
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "## 🔴 Browser Console Errors (from JSON)" >> $GITHUB_STEP_SUMMARY
              echo "Browser console errors were detected during test execution:" >> $GITHUB_STEP_SUMMARY
              echo '```' >> $GITHUB_STEP_SUMMARY
              cat "${OUTPUT_DIR}/console-errors.json" | jq -r '.[] | "[\(.type)] [\(.time)] \(.text)"' >> $GITHUB_STEP_SUMMARY || cat "${OUTPUT_DIR}/console-errors.json" >> $GITHUB_STEP_SUMMARY
              echo '```' >> $GITHUB_STEP_SUMMARY
            elif [ -f "${OUTPUT_DIR}/all-console-errors.json" ]; then
              HAS_CONSOLE_ERRORS=true
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "## 🔴 Browser Console Errors (comprehensive)" >> $GITHUB_STEP_SUMMARY
              echo "Browser console errors were detected during test execution:" >> $GITHUB_STEP_SUMMARY
              echo '```' >> $GITHUB_STEP_SUMMARY
              cat "${OUTPUT_DIR}/all-console-errors.json" | jq -r '.combined[] | "[\(.type)] [\(.time)] \(.text)"' >> $GITHUB_STEP_SUMMARY || cat "${OUTPUT_DIR}/all-console-errors.json" >> $GITHUB_STEP_SUMMARY
              echo '```' >> $GITHUB_STEP_SUMMARY
            elif echo "$BODY" | jq -e '.consoleErrors' >/dev/null 2>&1; then
              CONSOLE_ERRORS_COUNT=$(echo "$BODY" | jq -r '.consoleErrors | length')
              if [ "$CONSOLE_ERRORS_COUNT" -gt 0 ]; then
                HAS_CONSOLE_ERRORS=true
                echo "" >> $GITHUB_STEP_SUMMARY
                echo "## 🔴 Browser Console Errors (from response)" >> $GITHUB_STEP_SUMMARY
                echo "Browser console errors were detected during test execution:" >> $GITHUB_STEP_SUMMARY
                echo '```' >> $GITHUB_STEP_SUMMARY
                echo "$BODY" | jq -r '.consoleErrors | map("[\(.type)] [\(.time)] \(.text)") | .[0:20] | .[]' >> $GITHUB_STEP_SUMMARY
                if [ "$CONSOLE_ERRORS_COUNT" -gt 20 ]; then
                  echo "" >> $GITHUB_STEP_SUMMARY
                  echo "... and $((CONSOLE_ERRORS_COUNT - 20)) more console errors" >> $GITHUB_STEP_SUMMARY
                fi
                echo '```' >> $GITHUB_STEP_SUMMARY
                
                echo "$BODY" | jq -r '.consoleErrors | map("[\(.type)] [\(.time)] \(.text)") | .[]' > "${OUTPUT_DIR}/console-errors-from-response.txt"
                echo "$BODY" | jq -r '.consoleErrors | map("[\(.type)] [\(.time)] \(.text)") | .[]' > "${WORKSPACE_OUTPUT}/console-errors-from-response.txt"
              fi
            fi
            
            if [ "$HAS_CONSOLE_ERRORS" = "true" ]; then
              echo "Console errors were found and added to the report"
            else
              echo "No console errors were found in any source"
            fi
            
            echo "## Environment" >> $GITHUB_STEP_SUMMARY
            echo "- **Environment:** ${{ needs.get-env.outputs.env }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Region:** ${{ matrix.region }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Run ID:** [#${{ github.run_id }}](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
            
            # This will make the workflow fail
            echo "Test failed due to incomplete metrics" >> "${OUTPUT_DIR}/error.txt"
            exit 1
          fi

          if [ -n "$METRICS" ]; then
            echo "Creating performance report in GitHub Summary..."

            echo "# 📊 Performance Test Results" >> $GITHUB_STEP_SUMMARY
            echo "| Test | Duration | Status |" >> $GITHUB_STEP_SUMMARY
            echo "| ---- | -------- | ------ |" >> $GITHUB_STEP_SUMMARY

            echo "$METRICS" | while IFS= read -r line; do
              if [[ "$line" =~ ([A-Za-z\ ]+)\ took\ ([0-9]+)ms ]]; then
                TEST_NAME="${BASH_REMATCH[1]}"
                DURATION="${BASH_REMATCH[2]}"

                if [[ "$line" =~ \[AUTH_ERROR\] ]]; then
                  STATUS="⛔️ Auth Error"
                elif [ "$DURATION" -lt 1000 ]; then
                  STATUS="✅ Excellent"
                elif [ "$DURATION" -lt 5000 ]; then
                  STATUS="✅ Good"
                elif [ "$DURATION" -lt 10000 ]; then
                  STATUS="⚠️ Acceptable"
                else
                  STATUS="🔴 Slow"
                fi

                echo "| $TEST_NAME | ${DURATION}ms | $STATUS |" >> $GITHUB_STEP_SUMMARY
              fi
            done

            echo "" >> $GITHUB_STEP_SUMMARY
            echo "## Environment" >> $GITHUB_STEP_SUMMARY
            echo "- **Environment:** ${{ needs.get-env.outputs.env }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Region:** ${{ matrix.region }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Run ID:** [#${{ github.run_id }}](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY

            echo "" >> $GITHUB_STEP_SUMMARY
            echo "## Performance Chart" >> $GITHUB_STEP_SUMMARY
            echo '```mermaid' >> $GITHUB_STEP_SUMMARY
            echo 'gantt' >> $GITHUB_STEP_SUMMARY
            echo '    title Test Duration (lower is better)' >> $GITHUB_STEP_SUMMARY
            echo '    dateFormat  X' >> $GITHUB_STEP_SUMMARY
            echo '    axisFormat %s' >> $GITHUB_STEP_SUMMARY

            echo "$METRICS" | while IFS= read -r line; do
              if [[ "$line" =~ ([A-Za-z\ ]+)\ took\ ([0-9]+)ms ]]; then
                TEST_NAME="${BASH_REMATCH[1]}"
                DURATION="${BASH_REMATCH[2]}"

                DURATION_SEC=$(awk "BEGIN {printf \"%.1f\", $DURATION/1000}")
                
                if [[ "$line" =~ \[AUTH_ERROR\] ]]; then
                  echo "    ${TEST_NAME} (Auth Error) :crit, 0, 0.1s" >> $GITHUB_STEP_SUMMARY
                else
                  echo "    ${TEST_NAME} :0, ${DURATION_SEC}s" >> $GITHUB_STEP_SUMMARY
                fi
              fi
            done

            echo '```' >> $GITHUB_STEP_SUMMARY
          else
            echo "# ❌ Performance Test Results" >> $GITHUB_STEP_SUMMARY
            echo "No performance metrics were found in the Lambda response." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "## Debug Information" >> $GITHUB_STEP_SUMMARY
            echo "- Status Code: $(echo "$RESPONSE" | jq -r '.StatusCode // "Unknown"')" >> $GITHUB_STEP_SUMMARY
            echo "- Function Error: $(echo "$RESPONSE" | jq -r '.FunctionError // "None"')" >> $GITHUB_STEP_SUMMARY
            echo "- Response Body: First 200 chars of body" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "${BODY:0:200}..." >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi

          echo "Files in temporary output directory:"
          ls -la "${OUTPUT_DIR}/" || echo "Failed to list temporary directory"

          echo "Files in workspace output directory:"
          ls -la "${WORKSPACE_OUTPUT}/" || echo "Failed to list workspace directory"

          if echo "$BODY" | jq -e '.success == true' >/dev/null 2>&1; then
            echo "Tests completed successfully (found success:true in response body)"
            echo "::notice::Tests completed successfully in region ${{ matrix.region }}"
            exit 0
          elif echo "$RESPONSE" | jq -e '.StatusCode == 200' >/dev/null 2>&1; then
            echo "Tests completed with status 200 (found StatusCode:200 in response)"
            echo "::notice::Tests completed with status 200 in region ${{ matrix.region }}"
            exit 0
          else
            echo "::error::Tests failed in region ${{ matrix.region }} for environment ${{ needs.get-env.outputs.env }}"
            echo "Response: $RESPONSE"
            exit 1
          fi

      - name: Upload test results as artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ needs.get-env.outputs.env }}-${{ matrix.region }}
          path: |
            ${{ github.workspace }}/test-output/
            /tmp/test-output/
          if-no-files-found: warn
          retention-days: 7

      - name: Cleanup temporary files
        if: always()
        working-directory: ${{ github.workspace }}
        run: |
          echo "Cleaning up temporary files..."
          rm -rf test-output
          find . -maxdepth 1 -name "*.zip" -type f -delete || true
          rm -rf node_modules || true
          rm -rf .cache || true
          rm -rf playwright-report || true
          echo "Cleanup completed"

      - name: Delete Lambda function
        if: always()
        run: |
          echo "Checking if Lambda function exists..."
          if aws lambda get-function \
            --function-name "playwright-test-${{ needs.get-env.outputs.env }}" \
            --region ${{ matrix.region }} >/dev/null 2>&1; then
            echo "Deleting Lambda function..."
            aws lambda delete-function \
              --function-name "playwright-test-${{ needs.get-env.outputs.env }}" \
              --region ${{ matrix.region }} || echo "::warning::Failed to delete Lambda function"
            echo "Lambda function deleted"
          else
            echo "Lambda function not found, skipping deletion"
          fi
