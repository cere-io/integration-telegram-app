# Playwright Lambda Tests
#
# Path handling rules:
# 1. Use ${{ github.workspace }} for absolute paths in commands
# 2. Never use ./ or ../ in paths
# 3. Use clean filenames without paths for artifacts
# 4. Always use forward slashes in paths
# 5. Create dedicated directories for outputs

name: Playwright Lambda Tests

on:
  # Run on merge to stage/prod
  push:
    branches:
      - stage
      - prod
  # Run on schedule (daily at 00:00 UTC for stage and 12:00 UTC for prod)
  schedule:
    - cron: '0 0 * * *'  # Run stage tests at 00:00 UTC
    - cron: '0 12 * * *' # Run prod tests at 12:00 UTC
  # Manual run
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to run tests in'
        required: true
        default: 'stage'
        type: choice
        options:
          - stage
          - prod
      regions:
        description: 'Regions to run tests in'
        required: true
        default: 'all'
        type: choice
        # Add single-region options you want the user to be able to select:
        options:
          - all
          - eu-central-1
          - us-west-2
          - us-east-1
          - eu-west-1
          - eu-west-2
          - eu-north-1

permissions:
  id-token: write
  contents: read

jobs:
  get-regions:
    name: Get regions to test
    runs-on: ubuntu-latest
    outputs:
      regions: ${{ steps.set-regions.outputs.regions }}
    steps:
      - name: Set regions
        id: set-regions
        run: |
          # For schedule events or push events, default to these two regions:
          if [ "${{ github.event_name }}" = "schedule" ] || [ "${{ github.event_name }}" = "push" ]; then
            echo "regions=['eu-central-1','us-west-2']" >> $GITHUB_OUTPUT

          # If user selects "all" for a manual run, list multiple regions:
          elif [ "${{ inputs.regions }}" = "all" ]; then
            echo "regions=['eu-central-1','us-west-2','us-east-1','eu-west-1','eu-west-2','eu-north-1']" >> $GITHUB_OUTPUT

          # Otherwise, just use the single region chosen:
          else
            echo "regions=['${{ inputs.regions }}']" >> $GITHUB_OUTPUT
          fi
          
          echo "Selected regions: $(cat $GITHUB_OUTPUT | grep regions)"

  get-env:
    name: Get environment
    runs-on: ubuntu-latest
    outputs:
      env: ${{ steps.set-env.outputs.env }}
      account_id: ${{ steps.set-env.outputs.account_id }}
    steps:
      - name: Set environment
        id: set-env
        run: |
          if [ "${{ github.event_name }}" = "push" ]; then
            echo "env=${{ github.ref_name }}" >> $GITHUB_OUTPUT
            if [ "${{ github.ref_name }}" = "prod" ]; then
              echo "account_id=${{ vars.PRD_CORE_AWS_ACCOUNT_ID }}" >> $GITHUB_OUTPUT
            else
              echo "account_id=${{ vars.STG_CORE_AWS_ACCOUNT_ID }}" >> $GITHUB_OUTPUT
            fi
          elif [ "${{ github.event_name }}" = "schedule" ]; then
            if [ "${{ github.event.schedule }}" = "0 0 * * *" ]; then
              echo "env=stage" >> $GITHUB_OUTPUT
              echo "account_id=${{ vars.STG_CORE_AWS_ACCOUNT_ID }}" >> $GITHUB_OUTPUT
            else
              echo "env=prod" >> $GITHUB_OUTPUT
              echo "account_id=${{ vars.PRD_CORE_AWS_ACCOUNT_ID }}" >> $GITHUB_OUTPUT
            fi
          else
            echo "env=${{ inputs.environment }}" >> $GITHUB_OUTPUT
            if [ "${{ inputs.environment }}" = "prod" ]; then
              echo "account_id=${{ vars.PRD_CORE_AWS_ACCOUNT_ID }}" >> $GITHUB_OUTPUT
            else
              echo "account_id=${{ vars.STG_CORE_AWS_ACCOUNT_ID }}" >> $GITHUB_OUTPUT
            fi
          fi

          # Print parameters that will be used
          echo "Parameters that will be used:"
          echo "env: ${{ steps.set-env.outputs.env }}"
          echo "account_id: ${{ steps.set-env.outputs.account_id }}"
          echo "lambda_function_name: playwright-test-${{ steps.set-env.outputs.env }}"

  deploy-lambda:
    name: Deploy Lambda Function
    needs: [get-regions, get-env]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        region: ${{ fromJson(needs.get-regions.outputs.regions) }}
      fail-fast: false
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: |
          echo "Installing dependencies..."
          npm ci
          echo "Dependencies installed successfully"

      - name: Prepare Lambda package
        run: |
          echo "Building Lambda package..."
          npm run prepare:lambda
          echo "Lambda package built successfully"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-skip-session-tagging: true
          role-to-assume: arn:aws:iam::${{ vars.STG_CORE_AWS_ACCOUNT_ID }}:role/github
          role-session-name: ${{ github.event.repository.name }}
          aws-region: ${{ matrix.region }}
          audience: sts.amazonaws.com

      - name: Deploy Lambda function
        run: |
          echo "Creating/updating Lambda function..."
          if aws lambda get-function --function-name "playwright-test-${{ needs.get-env.outputs.env }}" --region ${{ matrix.region }} >/dev/null 2>&1; then
            echo "Updating existing Lambda function..."
            aws lambda update-function-code \
              --function-name "playwright-test-${{ needs.get-env.outputs.env }}" \
              --zip-file fileb://lambda-package.zip \
              --region ${{ matrix.region }}
          else
            echo "Creating new Lambda function..."
            aws lambda create-function \
              --function-name "playwright-test-${{ needs.get-env.outputs.env }}" \
              --runtime nodejs20.x \
              --handler index.handler \
              --role "arn:aws:iam::${{ needs.get-env.outputs.account_id }}:role/lambda-playwright-test" \
              --timeout 900 \
              --cli-read-timeout 900 \
              --cli-connect-timeout 900 \ 
              --memory-size 2048 \
              --zip-file fileb://lambda-package.zip \
              --region ${{ matrix.region }}
          fi
          
          echo "Waiting for Lambda function to be ready..."
          aws lambda wait function-active \
            --function-name "playwright-test-${{ needs.get-env.outputs.env }}" \
            --region ${{ matrix.region }}
          
          echo "Lambda function deployed successfully"

      - name: Run tests in Lambda
        id: run_tests
        run: |
          OUTPUT_DIR="/tmp/test-output"
          echo "Creating output directory at ${OUTPUT_DIR}..."
          mkdir -p "${OUTPUT_DIR}"

          if [ -d "${OUTPUT_DIR}" ]; then
            echo "Directory created successfully"
          else
            echo "::error::Failed to create directory, using /tmp directly"
            OUTPUT_DIR="/tmp"
          fi

          WORKSPACE_OUTPUT="${GITHUB_WORKSPACE}/test-output"
          echo "Creating workspace directory at ${WORKSPACE_OUTPUT}..."
          mkdir -p "${WORKSPACE_OUTPUT}"

          echo "Waiting for Lambda function to be ready..."
          aws lambda wait function-active \
            --function-name "playwright-test-${{ needs.get-env.outputs.env }}" \
            --region ${{ matrix.region }} || {
              echo "::error::Lambda function not ready after waiting"
              exit 1
            }

          echo "Lambda function is ready, starting tests..."

          echo "Running tests in Lambda..."
          RESPONSE=$(timeout 900 aws lambda invoke \
            --function-name "playwright-test-${{ needs.get-env.outputs.env }}" \
            --payload '{"region": "${{ matrix.region }}", "environment": "${{ needs.get-env.outputs.env }}"}' \
            --cli-binary-format raw-in-base64-out \
            --output json \
            /dev/stdout) || {
              echo "::error::Lambda invocation timed out or failed to execute"
              exit 1
            }

          echo "$RESPONSE" > "${OUTPUT_DIR}/raw-response.json"
          echo "$RESPONSE" > "${WORKSPACE_OUTPUT}/raw-response.json"
          echo "Response saved to both directories"

          echo "===== LAMBDA RESPONSE ====="
          echo "$RESPONSE" | jq '.'
          echo "==========================="

          BODY=$(echo "$RESPONSE" | jq -r '.body')
          echo "$BODY" > "${OUTPUT_DIR}/lambda-body.txt"
          echo "$BODY" > "${WORKSPACE_OUTPUT}/lambda-body.txt"

          # Process the Lambda response using the external script
          .github/scripts/process-lambda-results.sh \
            "${OUTPUT_DIR}" \
            "${WORKSPACE_OUTPUT}" \
            "${BODY}" \
            "${RESPONSE}" \
            "${GITHUB_STEP_SUMMARY}" \
            "${{ needs.get-env.outputs.env }}" \
            "${{ matrix.region }}" \
            "${{ github.run_id }}" \
            "${{ github.repository }}"

          echo "Files in temporary output directory:"
          ls -la "${OUTPUT_DIR}/" || echo "Failed to list temporary directory"

          echo "Files in workspace output directory:"
          ls -la "${WORKSPACE_OUTPUT}/" || echo "Failed to list workspace directory"

          if echo "$BODY" | jq -e '.success == true' >/dev/null 2>&1; then
            echo "Tests completed successfully (found success:true in response body)"
            echo "::notice::Tests completed successfully in region ${{ matrix.region }}"
            exit 0
          elif echo "$RESPONSE" | jq -e '.StatusCode == 200' >/dev/null 2>&1; then
            echo "Tests completed with status 200 (found StatusCode:200 in response)"
            echo "::notice::Tests completed with status 200 in region ${{ matrix.region }}"
            exit 0
          else
            echo "::error::Tests failed in region ${{ matrix.region }} for environment ${{ needs.get-env.outputs.env }}"
            echo "Response: $RESPONSE"
            exit 1
          fi

      - name: Upload test results as artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ needs.get-env.outputs.env }}-${{ matrix.region }}
          path: |
            ${{ github.workspace }}/test-output/
            /tmp/test-output/
          if-no-files-found: warn
          retention-days: 7

      - name: Cleanup temporary files
        if: always()
        working-directory: ${{ github.workspace }}
        run: |
          echo "Cleaning up temporary files..."
          rm -rf test-output
          find . -maxdepth 1 -name "*.zip" -type f -delete || true
          rm -rf node_modules || true
          rm -rf .cache || true
          rm -rf playwright-report || true
          echo "Cleanup completed"

      - name: Delete Lambda function
        if: always()
        run: |
          echo "Checking if Lambda function exists..."
          if aws lambda get-function \
            --function-name "playwright-test-${{ needs.get-env.outputs.env }}" \
            --region ${{ matrix.region }} >/dev/null 2>&1; then
            echo "Deleting Lambda function..."
            aws lambda delete-function \
              --function-name "playwright-test-${{ needs.get-env.outputs.env }}" \
              --region ${{ matrix.region }} || echo "::warning::Failed to delete Lambda function"
            echo "Lambda function deleted"
          else
            echo "Lambda function not found, skipping deletion"
          fi
